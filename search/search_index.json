{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b97\u6cd5\u5de5\u7a0b\u5b9e\u9a8c \u73af\u5883\u5b89\u88c5\u4e0e\u914d\u7f6e \u5b9e\u9a8c\u4ee3\u7801\u9700\u8981\u5728linux\u73af\u5883\u4e0b\u5b89\u88c5\u4e0e\u7f16\u8bd1\uff0c\u63a8\u8350Windows\u7528\u6237\u4f7f\u7528WSL\u6216\u8005\u865a\u62df\u673a\uff0c\u5b89\u88c5\u8bf4\u660e\u5982\u4e0b\uff1a Windows Subsystem for Linux(WSL) VMWare WorkStaion Player \u5b9e\u9a8c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u5e76\u884c\u5de5\u5177Cilk\u3002 Cilk \u662f\u7531MIT \u7684 Charles E. Leiserson \u53ca\u5176\u56e2\u961f\u6700\u521d\u5f00\u53d1\u7684\u5e76\u884c\u5de5\u5177\uff0c\u5728gcc5(g++5)\u4e2d\u88ab\u52a0\u5165\uff0cgcc8(g++8)\u4e2d\u88ab\u5f03\u7528\uff0c\u6b64\u540e\u7248\u672c\u7684gcc\uff08\u4e0eg++\uff09\u4e0d\u518d\u652f\u6301Cilk\u3002Cilk\u540e\u6765\u88ab Cilk Arts \u516c\u53f8\u5546\u4e1a\u5316\u4e3a Cilk++\u3002\u8be5\u516c\u53f8\u968f\u540e\u88ab\u82f1\u7279\u5c14\u6536\u8d2d\uff0c\u56e0\u7279\u5c14\u5c06\u5176\u79f0\u4e3a Cilk Plus\u3002\u6b64\u5916\uff0cLeiserson \u56e2\u961f\u53d1\u5e03\u4e86Cilk\u7684\u5f00\u6e90\u7248\u672c OpenCilk \uff0c\u8fd9\u662f\u4e00\u4e2a\u4fee\u6539\u8fc7\u7684clang10\u7f16\u8bd1\u5668\uff0c\u652f\u6301Cilk\u8bed\u6cd5\u3002 \u5b8c\u6210\u672c\u5b9e\u9a8c\u65f6\u5efa\u8bae\u4f7f\u7528gcc7(g++7)\u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u6216\u8005\u5b89\u88c5OpenCilk\u5e76\u4f7f\u7528clang10(clang++10)\u3002 \u5b9e\u9a8c\u5185\u5bb9 \u6392\u5e8f \u5bf9\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f \u4efb\u52a11\uff1a\u5feb\u901f\u6392\u5e8f \u4efb\u52a12\uff1a\u5f52\u5e76\u6392\u5e8f \u77e9\u9635\u4e58\u6cd5 \u5c06\u4e24\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u6574\u6570\u65b9\u9635\u76f8\u4e58 \u4efb\u52a11\uff1a\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5 \u4efb\u52a12\uff1a\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5 \u4efb\u52a13\uff1astrassen\u77e9\u9635\u4e58\u6cd5 Page Rank \u8ba1\u7b97\u7b80\u5355\u56fe\u7684page-rank\u503c \u4efb\u52a11\uff1a\u8fed\u4ee3\u7b97\u6cd5 \u4efb\u52a12\uff1a\u4ee3\u6570\u7b97\u6cd5 BFS \u5bf9\u56fe\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u4efb\u52a11\uff1a\u81ea\u9876\u5411\u4e0b\u7684BFS \u4efb\u52a12\uff1a\u81ea\u5e95\u5411\u4e0a\u7684BFS \u4efb\u52a13\uff1a\u6df7\u5408\u7684BFS Triangle Counting \u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\uff08\u4e09\u5143\u73af\uff09\u7684\u4e2a\u6570 \u4efb\u52a11\uff1arank-and-count\u7b97\u6cd5 \u4efb\u52a12\uff1a\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting \u6570\u636e\u683c\u5f0f array \u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7684n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 matrix \u5927\u5c0f\u4e3an*n\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u77e9\u9635\u7684\u8fb9\u957f\uff0c\u4e4b\u540e\u7684n*n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 adjoint_list \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9","title":"\u7b97\u6cd5\u5de5\u7a0b\u5b9e\u9a8c"},{"location":"#_1","text":"","title":"\u7b97\u6cd5\u5de5\u7a0b\u5b9e\u9a8c"},{"location":"#_2","text":"\u5b9e\u9a8c\u4ee3\u7801\u9700\u8981\u5728linux\u73af\u5883\u4e0b\u5b89\u88c5\u4e0e\u7f16\u8bd1\uff0c\u63a8\u8350Windows\u7528\u6237\u4f7f\u7528WSL\u6216\u8005\u865a\u62df\u673a\uff0c\u5b89\u88c5\u8bf4\u660e\u5982\u4e0b\uff1a Windows Subsystem for Linux(WSL) VMWare WorkStaion Player \u5b9e\u9a8c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u5e76\u884c\u5de5\u5177Cilk\u3002 Cilk \u662f\u7531MIT \u7684 Charles E. Leiserson \u53ca\u5176\u56e2\u961f\u6700\u521d\u5f00\u53d1\u7684\u5e76\u884c\u5de5\u5177\uff0c\u5728gcc5(g++5)\u4e2d\u88ab\u52a0\u5165\uff0cgcc8(g++8)\u4e2d\u88ab\u5f03\u7528\uff0c\u6b64\u540e\u7248\u672c\u7684gcc\uff08\u4e0eg++\uff09\u4e0d\u518d\u652f\u6301Cilk\u3002Cilk\u540e\u6765\u88ab Cilk Arts \u516c\u53f8\u5546\u4e1a\u5316\u4e3a Cilk++\u3002\u8be5\u516c\u53f8\u968f\u540e\u88ab\u82f1\u7279\u5c14\u6536\u8d2d\uff0c\u56e0\u7279\u5c14\u5c06\u5176\u79f0\u4e3a Cilk Plus\u3002\u6b64\u5916\uff0cLeiserson \u56e2\u961f\u53d1\u5e03\u4e86Cilk\u7684\u5f00\u6e90\u7248\u672c OpenCilk \uff0c\u8fd9\u662f\u4e00\u4e2a\u4fee\u6539\u8fc7\u7684clang10\u7f16\u8bd1\u5668\uff0c\u652f\u6301Cilk\u8bed\u6cd5\u3002 \u5b8c\u6210\u672c\u5b9e\u9a8c\u65f6\u5efa\u8bae\u4f7f\u7528gcc7(g++7)\u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u6216\u8005\u5b89\u88c5OpenCilk\u5e76\u4f7f\u7528clang10(clang++10)\u3002","title":"\u73af\u5883\u5b89\u88c5\u4e0e\u914d\u7f6e"},{"location":"#_3","text":"","title":"\u5b9e\u9a8c\u5185\u5bb9"},{"location":"#_4","text":"\u5bf9\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f \u4efb\u52a11\uff1a\u5feb\u901f\u6392\u5e8f \u4efb\u52a12\uff1a\u5f52\u5e76\u6392\u5e8f","title":"\u6392\u5e8f"},{"location":"#_5","text":"\u5c06\u4e24\u4e2a\u76f8\u540c\u5927\u5c0f\u7684\u6574\u6570\u65b9\u9635\u76f8\u4e58 \u4efb\u52a11\uff1a\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5 \u4efb\u52a12\uff1a\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5 \u4efb\u52a13\uff1astrassen\u77e9\u9635\u4e58\u6cd5","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"#page-rank","text":"\u8ba1\u7b97\u7b80\u5355\u56fe\u7684page-rank\u503c \u4efb\u52a11\uff1a\u8fed\u4ee3\u7b97\u6cd5 \u4efb\u52a12\uff1a\u4ee3\u6570\u7b97\u6cd5","title":"Page Rank"},{"location":"#bfs","text":"\u5bf9\u56fe\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u4efb\u52a11\uff1a\u81ea\u9876\u5411\u4e0b\u7684BFS \u4efb\u52a12\uff1a\u81ea\u5e95\u5411\u4e0a\u7684BFS \u4efb\u52a13\uff1a\u6df7\u5408\u7684BFS","title":"BFS"},{"location":"#triangle-counting","text":"\u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\uff08\u4e09\u5143\u73af\uff09\u7684\u4e2a\u6570 \u4efb\u52a11\uff1arank-and-count\u7b97\u6cd5 \u4efb\u52a12\uff1a\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting","title":"Triangle Counting"},{"location":"#_6","text":"","title":"\u6570\u636e\u683c\u5f0f"},{"location":"#array","text":"\u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7684n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9","title":"array"},{"location":"#matrix","text":"\u5927\u5c0f\u4e3an*n\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u77e9\u9635\u7684\u8fb9\u957f\uff0c\u4e4b\u540e\u7684n*n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9","title":"matrix"},{"location":"#adjoint_list","text":"\u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9","title":"adjoint_list"},{"location":"1-sort/","text":"1-sort \u5bf9\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f \u57fa\u672c\u4fe1\u606f \u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7684n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 sort <filename> \u4efb\u52a11\uff1a\u5feb\u901f\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u5feb\u901f\u6392\u5e8f\u4f7f\u7528 \u5206\u6cbb\u6cd5 \uff08Divide and conquer\uff09\u7b56\u7565\u6765\u628a\u4e00\u4e2a \u5e8f\u5217 \uff08list\uff09\u5206\u4e3a\u8f83\u5c0f\u548c\u8f83\u5927\u76842\u4e2a\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u9012\u5f52\u5730\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217\u3002 \u6b65\u9aa4\u4e3a\uff1a \u6311\u9009\u57fa\u51c6\u503c\uff1a\u4ece\u6570\u7ec4\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a\u201c\u57fa\u51c6\u201d\uff08pivot\uff09 \u5206\u5272\uff1a\u91cd\u65b0\u6392\u5e8f\u6570\u7ec4\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u5143\u7d20\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20\u6446\u5728\u57fa\u51c6\u540e\u9762\uff08\u4e0e\u57fa\u51c6\u503c\u76f8\u7b49\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4f55\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u5272\u7ed3\u675f\u4e4b\u540e\uff0c\u5bf9\u57fa\u51c6\u503c\u7684\u6392\u5e8f\u5c31\u5df2\u7ecf\u5b8c\u6210\u3002 \u9012\u5f52\u6392\u5e8f\u5b50\u5e8f\u5217\uff1a \u9012\u5f52 \u5730\u5c06\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u6392\u5e8f\u3002 \u9012\u5f52\u5230\u6700\u5e95\u90e8\u7684\u5224\u65ad\u6761\u4ef6\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u96f6\u6216\u4e00\uff0c\u6b64\u65f6\u8be5\u6570\u7ec4\u663e\u7136\u5df2\u7ecf\u6709\u5e8f\u3002 \u9009\u53d6\u57fa\u51c6\u503c\u6709\u6570\u79cd\u5177\u4f53\u65b9\u6cd5\uff0c\u6b64\u9009\u53d6\u65b9\u6cd5\u5bf9\u6392\u5e8f\u7684\u65f6\u95f4\u6027\u80fd\u6709\u51b3\u5b9a\u6027\u5f71\u54cd\u3002 \u5e76\u884c\u5316 \u5feb\u901f\u6392\u5e8f\u7684\u5e76\u884c\u5316\u5173\u952e\u662f\u5bf9\u5206\u5272\u6570\u7ec4\u8fc7\u7a0b\u7684\u5e76\u884c\uff0c\u5728\u5e76\u884c\u4e2d\u4f1a\u4f7f\u7528\u5230\u5e76\u884c\u6c42\u524d\u7f00\u548c \u524d\u7f00\u548c\u3002\u5e76\u884c\u6c42\u524d\u7f00\u548c\u7684\u65b9\u6cd5\u8bf7\u8bfb\u8005\u81ea\u884c\u67e5\u9605\u8d44\u6599\u638c\u63e1\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0 \u5e76\u884c\u5206\u5272\u8fc7\u7a0b\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u521b\u5efa\u4e0e\u5f85\u5206\u5272\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\u7684\u6574\u578b\u6570\u7ec4flag\uff0c\u5e76\u884c\u5730\u5224\u65adarray[i]<=pivot\u662f\u5426\u6210\u7acb\uff0c\u5c06\u5224\u65ad\u7ed3\u679c\u75280,1\u8868\u793a\u5e76\u5b58\u50a8\u5728flag\u4e2d \u5bf9flag\u5e76\u884c\u5730\u6c42\u524d\u7f00\u548c\uff08prifix sum\uff09\uff0c\u5b58\u50a8\u5728\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u6570\u7ec4index\u4e2d\u3002\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cindex\u4e2d\u4e0e\u524d\u4e00\u9879\u503c\u4e0d\u540c\u7684\u9879\u5373\u4e3a\u5206\u5272\u5b8c\u6210\u540e\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u5143\u7d20\u5728\u65b0\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u6839\u636eindex\u6570\u7ec4\u5e76\u884c\u5730\u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u65b0\u6570\u7ec4 \u4e0a\u8ff0\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u5143\u7d20\u5df2\u7ecf\u5728\u65b0\u6570\u7ec4\u4e2d\u5c31\u7eea\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5c06\u5927\u4e8epivot\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u65b0\u6570\u7ec4\u5373\u53ef \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199quick_sort.cpp\u6587\u4ef6\u4e2d\u7684quick_sort\u51fd\u6570\u4ee5\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a12\uff1a\u5f52\u5e76\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f\u6709\u5f88\u591a\u5b9e\u73b0\u65b9\u5f0f\uff0c\u81ea\u9876\u5411\u4e0b\u7684\u65b9\u5f0f\u662f\u5c06\u4e00\u4e2a\u5e8f\u5217\u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u5206\u522b\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5373\u5f97\u5230\u6709\u5e8f\u7684\u5e8f\u5217 \u6b65\u9aa4\u4e3a\uff1a \u9012\u5f52\u6392\u5e8f\u5b50\u5e8f\u5217\uff1a\u5c06\u6570\u7ec4\u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u9012\u5f52\u5730\u6392\u5e8f \u5408\u5e76\uff08merge\uff09\uff1a\u4f9d\u6b21\u6bd4\u8f83\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6bcf\u6b21\u6bd4\u8f83\u540e\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u6570\u7ec4\u4e2d \u9012\u5f52\u7684\u7ed3\u675f\u5224\u65ad\u6761\u4ef6\u662f\u6570\u7ec4\u91cc\u53ea\u67090~1\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6\u6570\u7ec4\u663e\u7136\u6709\u5e8f \u5e76\u884c\u5316 \u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5bf9\u5408\u5e76\u6570\u7ec4\u8fc7\u7a0b\u7684\u5e76\u884c\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5229\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u51fa\u5f85\u5408\u5e76\u7684\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u4e2d\u4f4d\u6570\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u67e5\u627e\u6574\u4f53\u4e2d\u4f4d\u6570\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5728log\u7ea7\u522b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210 \u8bb0\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u88ab\u4e2d\u4f4d\u6570\u5206\u5272\u4e3a\u3010A\u3011\u3010B\u3011\u3001\u3010C\u3011\u3010D\u3011\uff0c\u90a3\u4e48\u5408\u5e76\u540e\u7684\u6570\u7ec4\u5c31\u4e3a\u3010A\u4e0eC\u5408\u5e76\u3011\u3010B\u4e0eD\u5408\u5e76\u3011 \u9012\u5f52\u5730\u8ba1\u7b97\u3010A\u4e0eC\u5408\u5e76\u3011\u3001\u3010B\u4e0eD\u5408\u5e76\u3011 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199merge_sort.cpp\u6587\u4ef6\u4e2d\u7684merge_sort\u51fd\u6570\u4ee5\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u53c2\u8003\u6587\u732e [1]\u7ef4\u57fa\u767e\u79d1. \u5feb\u901f\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F. [2]\u7ef4\u57fa\u767e\u79d1. \u5f52\u5e76\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F. [3]Yan Gu. \u5e76\u884c\u7b97\u6cd5\u79d1\u666e\u5411 \u7cfb\u5217\u4e4b\u4e09\uff1a\u5f52\u5e76\u4e0e\u5f52\u5e76\u6392\u5e8f\uff0c\u8fc7\u6ee4\u4e0e\u5feb\u901f\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zhuanlan.zhihu.com/p/93279731.","title":"1-sort"},{"location":"1-sort/#1-sort","text":"\u5bf9\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f","title":"1-sort"},{"location":"1-sort/#_1","text":"\u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u957f\u5ea6\u4e3an\u7684\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7684n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 sort <filename>","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"1-sort/#1","text":"\u5feb\u901f\u6392\u5e8f \u5feb\u901f\u6392\u5e8f\u4f7f\u7528 \u5206\u6cbb\u6cd5 \uff08Divide and conquer\uff09\u7b56\u7565\u6765\u628a\u4e00\u4e2a \u5e8f\u5217 \uff08list\uff09\u5206\u4e3a\u8f83\u5c0f\u548c\u8f83\u5927\u76842\u4e2a\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u9012\u5f52\u5730\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217\u3002 \u6b65\u9aa4\u4e3a\uff1a \u6311\u9009\u57fa\u51c6\u503c\uff1a\u4ece\u6570\u7ec4\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a\u201c\u57fa\u51c6\u201d\uff08pivot\uff09 \u5206\u5272\uff1a\u91cd\u65b0\u6392\u5e8f\u6570\u7ec4\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u5143\u7d20\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20\u6446\u5728\u57fa\u51c6\u540e\u9762\uff08\u4e0e\u57fa\u51c6\u503c\u76f8\u7b49\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4f55\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u5272\u7ed3\u675f\u4e4b\u540e\uff0c\u5bf9\u57fa\u51c6\u503c\u7684\u6392\u5e8f\u5c31\u5df2\u7ecf\u5b8c\u6210\u3002 \u9012\u5f52\u6392\u5e8f\u5b50\u5e8f\u5217\uff1a \u9012\u5f52 \u5730\u5c06\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u6392\u5e8f\u3002 \u9012\u5f52\u5230\u6700\u5e95\u90e8\u7684\u5224\u65ad\u6761\u4ef6\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u662f\u96f6\u6216\u4e00\uff0c\u6b64\u65f6\u8be5\u6570\u7ec4\u663e\u7136\u5df2\u7ecf\u6709\u5e8f\u3002 \u9009\u53d6\u57fa\u51c6\u503c\u6709\u6570\u79cd\u5177\u4f53\u65b9\u6cd5\uff0c\u6b64\u9009\u53d6\u65b9\u6cd5\u5bf9\u6392\u5e8f\u7684\u65f6\u95f4\u6027\u80fd\u6709\u51b3\u5b9a\u6027\u5f71\u54cd\u3002 \u5e76\u884c\u5316 \u5feb\u901f\u6392\u5e8f\u7684\u5e76\u884c\u5316\u5173\u952e\u662f\u5bf9\u5206\u5272\u6570\u7ec4\u8fc7\u7a0b\u7684\u5e76\u884c\uff0c\u5728\u5e76\u884c\u4e2d\u4f1a\u4f7f\u7528\u5230\u5e76\u884c\u6c42\u524d\u7f00\u548c \u524d\u7f00\u548c\u3002\u5e76\u884c\u6c42\u524d\u7f00\u548c\u7684\u65b9\u6cd5\u8bf7\u8bfb\u8005\u81ea\u884c\u67e5\u9605\u8d44\u6599\u638c\u63e1\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0 \u5e76\u884c\u5206\u5272\u8fc7\u7a0b\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a \u521b\u5efa\u4e0e\u5f85\u5206\u5272\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\u7684\u6574\u578b\u6570\u7ec4flag\uff0c\u5e76\u884c\u5730\u5224\u65adarray[i]<=pivot\u662f\u5426\u6210\u7acb\uff0c\u5c06\u5224\u65ad\u7ed3\u679c\u75280,1\u8868\u793a\u5e76\u5b58\u50a8\u5728flag\u4e2d \u5bf9flag\u5e76\u884c\u5730\u6c42\u524d\u7f00\u548c\uff08prifix sum\uff09\uff0c\u5b58\u50a8\u5728\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u6570\u7ec4index\u4e2d\u3002\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0cindex\u4e2d\u4e0e\u524d\u4e00\u9879\u503c\u4e0d\u540c\u7684\u9879\u5373\u4e3a\u5206\u5272\u5b8c\u6210\u540e\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u5143\u7d20\u5728\u65b0\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807 \u6839\u636eindex\u6570\u7ec4\u5e76\u884c\u5730\u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u65b0\u6570\u7ec4 \u4e0a\u8ff0\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8epivot\u7684\u5143\u7d20\u5df2\u7ecf\u5728\u65b0\u6570\u7ec4\u4e2d\u5c31\u7eea\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5c06\u5927\u4e8epivot\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u65b0\u6570\u7ec4\u5373\u53ef \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199quick_sort.cpp\u6587\u4ef6\u4e2d\u7684quick_sort\u51fd\u6570\u4ee5\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a11\uff1a\u5feb\u901f\u6392\u5e8f"},{"location":"1-sort/#2","text":"\u5f52\u5e76\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f\u6709\u5f88\u591a\u5b9e\u73b0\u65b9\u5f0f\uff0c\u81ea\u9876\u5411\u4e0b\u7684\u65b9\u5f0f\u662f\u5c06\u4e00\u4e2a\u5e8f\u5217\u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u5206\u522b\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5373\u5f97\u5230\u6709\u5e8f\u7684\u5e8f\u5217 \u6b65\u9aa4\u4e3a\uff1a \u9012\u5f52\u6392\u5e8f\u5b50\u5e8f\u5217\uff1a\u5c06\u6570\u7ec4\u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u9012\u5f52\u5730\u6392\u5e8f \u5408\u5e76\uff08merge\uff09\uff1a\u4f9d\u6b21\u6bd4\u8f83\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6bcf\u6b21\u6bd4\u8f83\u540e\u5c06\u8f83\u5c0f\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u6570\u7ec4\u4e2d \u9012\u5f52\u7684\u7ed3\u675f\u5224\u65ad\u6761\u4ef6\u662f\u6570\u7ec4\u91cc\u53ea\u67090~1\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6\u6570\u7ec4\u663e\u7136\u6709\u5e8f \u5e76\u884c\u5316 \u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5bf9\u5408\u5e76\u6570\u7ec4\u8fc7\u7a0b\u7684\u5e76\u884c\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5229\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u51fa\u5f85\u5408\u5e76\u7684\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u4e2d\u4f4d\u6570\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u67e5\u627e\u6574\u4f53\u4e2d\u4f4d\u6570\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5728log\u7ea7\u522b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210 \u8bb0\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u88ab\u4e2d\u4f4d\u6570\u5206\u5272\u4e3a\u3010A\u3011\u3010B\u3011\u3001\u3010C\u3011\u3010D\u3011\uff0c\u90a3\u4e48\u5408\u5e76\u540e\u7684\u6570\u7ec4\u5c31\u4e3a\u3010A\u4e0eC\u5408\u5e76\u3011\u3010B\u4e0eD\u5408\u5e76\u3011 \u9012\u5f52\u5730\u8ba1\u7b97\u3010A\u4e0eC\u5408\u5e76\u3011\u3001\u3010B\u4e0eD\u5408\u5e76\u3011 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199merge_sort.cpp\u6587\u4ef6\u4e2d\u7684merge_sort\u51fd\u6570\u4ee5\u5b9e\u73b0\u5f52\u5e76\u6392\u5e8f\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a12\uff1a\u5f52\u5e76\u6392\u5e8f"},{"location":"1-sort/#_2","text":"[1]\u7ef4\u57fa\u767e\u79d1. \u5feb\u901f\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F. [2]\u7ef4\u57fa\u767e\u79d1. \u5f52\u5e76\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F. [3]Yan Gu. \u5e76\u884c\u7b97\u6cd5\u79d1\u666e\u5411 \u7cfb\u5217\u4e4b\u4e09\uff1a\u5f52\u5e76\u4e0e\u5f52\u5e76\u6392\u5e8f\uff0c\u8fc7\u6ee4\u4e0e\u5feb\u901f\u6392\u5e8f[EB/OL]. [2021-10-15]. https://zhuanlan.zhihu.com/p/93279731.","title":"\u53c2\u8003\u6587\u732e"},{"location":"2-matrix-multiply/","text":"2-matrix-multiply \u8bbeA,B,C\u4e3a n \u00d7 n \u7684\u65b9\u9635\uff0c\u5176\u4e2dn\u4e3a2\u7684\u5e42\uff0c\u4e00\u822c\u7684\u77e9\u9635\u53ef\u4ee5\u586b\u96f6\u4f7f\u5f97n\u4e3a2\u7684\u5e42\u3002\u8ba1\u7b97C = A \u00b7 B \u7684\u7ed3\u679c \u57fa\u672c\u4fe1\u606f \u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u5927\u5c0f\u4e3an*n\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u77e9\u9635\u7684\u8fb9\u957f\uff0c\u4e4b\u540e\u7684n*n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 \u51fd\u6570\u683c\u5f0f void example_function ( const int32_t * const * const a , const int32_t * const * const b , int32_t * const * const c , const uint32_t size ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 matrix-mul <filename_A> <filename_B> \u4efb\u52a11\uff1a\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5 \u8fd9\u91cc\u6211\u4eec\u5047\u5b9aABC\u5747\u7528\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u3002\u6700\u7b80\u5355\u7684\u8ba1\u7b97C = A \u00b7 B\u7684\u65b9\u6cd5\u662f for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) C [ i * n + j ] += A [ i * n + k ] * B [ k * n + j ]; \u5047\u8bben = 4096\uff0c\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u8bbf\u95ee\u7684\u4e0d\u662fB\u4e2d\u7684\u8fde\u7eed\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u8bbf\u95eeB\u7684\u8fc7\u7a0b\u7f13\u5b58\u547d\u4e2d\u7387\u4f4e\uff0c\u8fdb\u800c\u589e\u5927\u4e86\u603b\u8ba1\u7b97\u65f6\u95f4\uff0c\u5982\u56fe \u5c06\u4e09\u5c42\u5faa\u73af\u7684\u987a\u5e8f\u7531\u201ci-j-k\u201d\u6362\u6210\u201ci-k-j\u201d for ( int i = 0 ; i < n ; i ++ ) for ( int k = 0 ; k < n ; k ++ ) for ( int j = 0 ; j < n ; j ++ ) C [ i * n + j ] += A [ i * n + k ] * B [ k * n + j ]; \u8fd9\u65f6\u6bcf\u6b21\u8bbf\u95ee\u7684\u90fd\u662fB,C\u4e2d\u7684\u8fde\u7eed\u5143\u7d20\uff0c\u7f13\u5b58\u547d\u4e2d\u7387\u9ad8\uff0c\u603b\u8ba1\u7b97\u65f6\u95f4\u76f8\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u65b9\u6848\u4f1a\u6709\u6240\u63d0\u5347 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199loop.cpp\u6587\u4ef6\u4e2d\u7684loop\u51fd\u6570\u4ee5\u5b9e\u73b0\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a12\uff1a\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5 \u5c06A,B,C\u5206\u6210\u76f8\u7b49\u5927\u5c0f\u7684\u65b9\u5757\u77e9\u9635\uff1a \u4e8e\u662f \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199divide_and_conquer.cpp\u6587\u4ef6\u4e2d\u7684divide_and_conquer\u51fd\u6570\u4ee5\u5b9e\u73b0\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a13\uff1astrassen\u77e9\u9635\u4e58\u6cd5 \u5c06A,B,C\u5206\u6210\u76f8\u7b49\u5927\u5c0f\u7684\u65b9\u5757\u77e9\u9635\uff1a \u4e8e\u662f \u5f15\u5165\u65b0\u77e9\u9635 \u53ef\u5f97\uff1a \u5176\u4e2d\u7684\u8ba1\u7b97\u4e5f\u662f\u4f7f\u7528strassen\u7b97\u6cd5\u6c42\u5f97\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199strassen.cpp\u6587\u4ef6\u4e2d\u7684strassen\u51fd\u6570\u4ee5\u5b9e\u73b0strassen\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u53c2\u8003\u6587\u732e [1]Charles E. Leiserson. Introduction & Matrix Multiplication[EB/OL]. [2021-10-15]. https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-slides/MIT6_172F18_lec1.pdf. [2]\u7ef4\u57fa\u767e\u79d1. \u65bd\u7279\u62c9\u68ee\u7b97\u6cd5[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E6%96%BD%E7%89%B9%E6%8B%89%E6%A3%AE%E6%BC%94%E7%AE%97%E6%B3%95.","title":"2-matrix-multiply"},{"location":"2-matrix-multiply/#2-matrix-multiply","text":"\u8bbeA,B,C\u4e3a n \u00d7 n \u7684\u65b9\u9635\uff0c\u5176\u4e2dn\u4e3a2\u7684\u5e42\uff0c\u4e00\u822c\u7684\u77e9\u9635\u53ef\u4ee5\u586b\u96f6\u4f7f\u5f97n\u4e3a2\u7684\u5e42\u3002\u8ba1\u7b97C = A \u00b7 B \u7684\u7ed3\u679c","title":"2-matrix-multiply"},{"location":"2-matrix-multiply/#_1","text":"\u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u5927\u5c0f\u4e3an*n\u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u77e9\u9635\u7684\u8fb9\u957f\uff0c\u4e4b\u540e\u7684n*n\u4e2a4\u5b57\u8282\u6709\u7b26\u53f7\u6574\u6570\u4e3a\u6570\u636e\u5185\u5bb9 \u51fd\u6570\u683c\u5f0f void example_function ( const int32_t * const * const a , const int32_t * const * const b , int32_t * const * const c , const uint32_t size ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 matrix-mul <filename_A> <filename_B>","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"2-matrix-multiply/#1","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u5b9aABC\u5747\u7528\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u3002\u6700\u7b80\u5355\u7684\u8ba1\u7b97C = A \u00b7 B\u7684\u65b9\u6cd5\u662f for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) C [ i * n + j ] += A [ i * n + k ] * B [ k * n + j ]; \u5047\u8bben = 4096\uff0c\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u8bbf\u95ee\u7684\u4e0d\u662fB\u4e2d\u7684\u8fde\u7eed\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u8bbf\u95eeB\u7684\u8fc7\u7a0b\u7f13\u5b58\u547d\u4e2d\u7387\u4f4e\uff0c\u8fdb\u800c\u589e\u5927\u4e86\u603b\u8ba1\u7b97\u65f6\u95f4\uff0c\u5982\u56fe \u5c06\u4e09\u5c42\u5faa\u73af\u7684\u987a\u5e8f\u7531\u201ci-j-k\u201d\u6362\u6210\u201ci-k-j\u201d for ( int i = 0 ; i < n ; i ++ ) for ( int k = 0 ; k < n ; k ++ ) for ( int j = 0 ; j < n ; j ++ ) C [ i * n + j ] += A [ i * n + k ] * B [ k * n + j ]; \u8fd9\u65f6\u6bcf\u6b21\u8bbf\u95ee\u7684\u90fd\u662fB,C\u4e2d\u7684\u8fde\u7eed\u5143\u7d20\uff0c\u7f13\u5b58\u547d\u4e2d\u7387\u9ad8\uff0c\u603b\u8ba1\u7b97\u65f6\u95f4\u76f8\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u65b9\u6848\u4f1a\u6709\u6240\u63d0\u5347 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199loop.cpp\u6587\u4ef6\u4e2d\u7684loop\u51fd\u6570\u4ee5\u5b9e\u73b0\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a11\uff1a\u7f13\u5b58\u4f18\u5316\u7684\u77e9\u9635\u4e58\u6cd5"},{"location":"2-matrix-multiply/#2","text":"\u5c06A,B,C\u5206\u6210\u76f8\u7b49\u5927\u5c0f\u7684\u65b9\u5757\u77e9\u9635\uff1a \u4e8e\u662f \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199divide_and_conquer.cpp\u6587\u4ef6\u4e2d\u7684divide_and_conquer\u51fd\u6570\u4ee5\u5b9e\u73b0\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a12\uff1a\u5206\u6cbb\u7684\u77e9\u9635\u4e58\u6cd5"},{"location":"2-matrix-multiply/#3strassen","text":"\u5c06A,B,C\u5206\u6210\u76f8\u7b49\u5927\u5c0f\u7684\u65b9\u5757\u77e9\u9635\uff1a \u4e8e\u662f \u5f15\u5165\u65b0\u77e9\u9635 \u53ef\u5f97\uff1a \u5176\u4e2d\u7684\u8ba1\u7b97\u4e5f\u662f\u4f7f\u7528strassen\u7b97\u6cd5\u6c42\u5f97\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199strassen.cpp\u6587\u4ef6\u4e2d\u7684strassen\u51fd\u6570\u4ee5\u5b9e\u73b0strassen\u77e9\u9635\u4e58\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a13\uff1astrassen\u77e9\u9635\u4e58\u6cd5"},{"location":"2-matrix-multiply/#_2","text":"[1]Charles E. Leiserson. Introduction & Matrix Multiplication[EB/OL]. [2021-10-15]. https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/lecture-slides/MIT6_172F18_lec1.pdf. [2]\u7ef4\u57fa\u767e\u79d1. \u65bd\u7279\u62c9\u68ee\u7b97\u6cd5[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/%E6%96%BD%E7%89%B9%E6%8B%89%E6%A3%AE%E6%BC%94%E7%AE%97%E6%B3%95.","title":"\u53c2\u8003\u6587\u732e"},{"location":"3-page-rank/","text":"3-page-rank \u8ba1\u7b97\u7b80\u5355\u56fe\u7684page-rank\u503c \u57fa\u672c\u4fe1\u606f \u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f void example_function ( const AdjointList & graph , Solution & solution ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 page-rank <filename> \u6570\u636e\u7ed3\u6784 struct Node typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0 class AdjointList \u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp class Solution \u6570\u636e uint32_t size ; // \u56fe\u7684\u8282\u70b9\u4e2a\u6570 double * value ; // value[i]\u5b58\u50a8\u6700\u7ec8\u7684\u7b2ci\u4e2a\u8282\u70b9\u7684PageRank\u503c \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 Solution (); Solution ( uint32_t size ); Solution ( const Solution & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Solution (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const Solution & other ) const ; Solution & operator = ( const Solution & other ); void clear (); void dump () const ; // \u5c06\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1solution.hpp\u4e0esolution.cpp \u9884\u5907\u77e5\u8bc6\uff1aPageRank PageRank\u662f Google \u516c\u53f8\u6240\u4f7f\u7528\u7684\u5bf9\u5176\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u7f51\u9875\u8fdb\u884c\u6392\u540d\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u4ee5\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u4e2a\u6570\u548c\u8d28\u91cf\u4f5c\u4e3a\u4e3b\u8981\u56e0\u7d20\u7c97\u7565\u5730\u5206\u6790\u7f51\u9875\u7684\u91cd\u8981\u6027\u7684\u7b97\u6cd5\uff0c\u5176\u57fa\u672c\u5047\u8bbe\u662f\uff1a\u66f4\u91cd\u8981\u7684\u9875\u9762\u5f80\u5f80\u66f4\u591a\u5730\u88ab\u5176\u4ed6\u9875\u9762\u5f15\u7528\uff08\u6216\u79f0\u5176\u4ed6\u9875\u9762\u4e2d\u4f1a\u66f4\u591a\u5730\u52a0\u5165\u901a\u5411\u8be5\u9875\u9762\u7684\u8d85\u94fe\u63a5\uff09\u3002 PageRank\u7684\u7ed3\u679c\u6765\u6e90\u4e8e\u4e00\u79cd\u57fa\u4e8e\u56fe\u8bba\u7684\u6570\u5b66\u7b97\u6cd5\u3002\u5b83\u5c06\u4e07\u7ef4\u7f51\u4e0a\u6240\u6709\u7684\u7f51\u9875\u89c6\u4f5c\u8282\u70b9\uff08node\uff09\uff0c\u800c\u5c06\u8d85\u94fe\u63a5\u89c6\u4f5c\u8fb9\uff08edge\uff09\u3002\u901a\u5411\u8be5\u7f51\u9875\u7684\u8d85\u94fe\u63a5\u79f0\u505a\u201c\u5bf9\u8be5\u7f51\u9875\u7684\u6295\u7968\uff08a vote of support\uff09\u201d\u3002 \u5047\u8bbe\u4e00\u4e2a\u75314\u4e2a\u7f51\u9875\u7ec4\u6210\u7684\u96c6\u5408\uff1a A \uff0c B \uff0c C \u548c D \u3002\u8fd9\u91cc\u5c06\u540c\u4e00\u9875\u9762\u4e2d\u591a\u4e2a\u6307\u5411\u76f8\u540c\u7684\u94fe\u63a5\u89c6\u4e3a\u540c\u4e00\u4e2a\u94fe\u63a5\u3002\u5bf9\u4e8e\u7279\u5b9a\u7684\u9875\u9762\uff0c\u5b83\u7684 PR\u503c \uff08PageRank\u503c\uff09\u5c06\u5747\u5206\u5230\u8be5\u9875\u9762\u6240\u94fe\u63a5\u7684\u9875\u9762\u4e0a\u3002 \u6ce8\uff1a\u6b64\u5904\u4ee5\u53ca\u4e0b\u6587\u4e2d\u7684\u94fe\u63a5\u5747\u4e3a\u5355\u5411\u94fe\u63a5\uff0c\u5373A->B\u4e0d\u7b49\u4ef7\u4e8eB->A \u5982\u679c\u6240\u6709\u9875\u9762\u90fd\u53ea\u94fe\u63a5\u81f3 A \uff0c\u90a3\u4e48 A \u7684PR\u503c\u5c06\u662f B \uff0c C \u53ca D \u7684PR\u503c\u4e4b\u548c\uff0c\u5373\uff1a \u91cd\u65b0\u5047\u8bbe B \u94fe\u63a5\u5230 A \u548c C \uff0c C \u94fe\u63a5\u5230 A \uff0c\u5e76\u4e14 D \u94fe\u63a5\u5230 A , B , C \u3002\u6700\u521d\u4e00\u4e2a\u9875\u9762\u603b\u5171\u53ea\u6709\u4e00\u7968\u3002\u6240\u4ee5 B \u7ed9 A , C \u6bcf\u4e2a\u9875\u9762\u534a\u7968\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c D \u6295\u51fa\u7684\u7968\u53ea\u6709\u4e09\u5206\u4e4b\u4e00\u52a0\u5230\u4e86 A \u7684PR\u503c\u4e0a\uff1a \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b97\u6cd5\u5c06\u6839\u636e\u6bcf\u4e2a\u9875\u9762\u8fde\u51fa\u603b\u6570L(x)\uff08 \u4ea6\u5373\u56fe\u4e2d\u8282\u70b9\u7684\u51fa\u5ea6 \uff09\u5e73\u5206\u8be5\u9875\u9762\u7684PR\u503c\uff0c\u5e76\u5c06\u5176\u52a0\u5230\u5176\u6240\u6307\u5411\u7684\u9875\u9762\uff1a \u6700\u540e\uff0c\u6240\u6709\u8fd9\u4e9bPR\u503c\u88ab\u6362\u7b97\u6210\u767e\u5206\u6bd4\u5f62\u5f0f\u518d\u4e58\u4e0a\u4e00\u4e2a\u4fee\u6b63\u7cfb\u6570 d\u3002d\u7684\u5927\u5c0f\u53ef\u4ee5\u7531\u4e00\u822c\u4e0a\u7f51\u8005\u4f7f\u7528\u6d4f\u89c8\u5668\u4e66\u7b7e\u529f\u80fd\u7684\u9891\u7387\u7684\u5e73\u5747\u503c\u4f30\u7b97\u5f97\u5230\uff0c\u5176\u610f\u4e49\u662f\uff1a\u4efb\u610f\u65f6\u523b\uff0c\u7528\u6237\u8bbf\u95ee\u5230\u67d0\u9875\u9762\u540e\u7ee7\u7eed\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u9875\u9762\u7684\u6982\u7387\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4fee\u6b63\u7cfb\u6570d\u7684\u53d6\u503c\u662f0.85 \u3002\u7531\u4e8e\u201c\u6ca1\u6709\u5411\u5916\u94fe\u63a5\u7684\u7f51\u9875\u201d\u4f20\u9012\u51fa\u53bb\u7684PR\u503c\u4f1a\u662f0\uff0c\u800c\u8fd9\u4f1a\u9012\u5f52\u5730\u5bfc\u81f4\u6307\u5411\u5b83\u7684\u9875\u9762\u7684PR\u503c\u7684\u8ba1\u7b97\u7ed3\u679c\u540c\u6837\u4e3a\u96f6\uff0c\u6240\u4ee5\u8d4b\u7ed9\u6bcf\u4e2a\u9875\u9762\u4e00\u4e2a\u6700\u5c0f\u503c(1-d)/N: \u6240\u4ee5\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u9875\u9762i\uff0c\u5176\u5bf9\u5e94PR\u503c\u5927\u5c0f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2dQ(pi)\u662f\u94fe\u5165\u9875\u9762pi\u7684\u96c6\u5408\u3002 \u96c6\u5408\u4e2d\u6240\u6709\u9875\u9762\u7684PR\u503c\u53ef\u4ee5\u7531\u4e00\u4e2a\u7279\u6b8a\u7684\u90bb\u63a5\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cfR\u8868\u793a\u3002\u4e0b\u9762\u5199\u51faR\u7684\u8fed\u4ee3\u5f0f\uff1a \u5bb9\u6613\u8bc1\u660e\uff0c\u4e0a\u8ff0\u8fed\u4ee3\u5f0f\u4e2dR\u662f\u6536\u655b\u7684\u3002 \u4efb\u52a11\uff1a\u8fed\u4ee3\u7b97\u6cd5 \u5c06\u6bcf\u4e2a\u70b9\u7684\u521d\u59cbPR\u503c\u5747\u8bbe\u7f6e\u4e3a1/N\u3002\u8bbe\u5b9a\u4e00\u4e2a\u7cbe\u786e\u5ea6\u03b5\uff0c\u8fed\u4ee3\u8ba1\u7b97 \u76f4\u5230|R\u2019-R|\u2264\u03b5 \u5373\u53ef\u3002\u5b9e\u8df5\u4e2d\uff0c\u51e0\u6b21\u8fed\u4ee3\u540eR'\u5373\u53ef\u5728\u6781\u9ad8\u7684\u7cbe\u786e\u5ea6\u4e0b\u4f30\u8ba1R\u7684\u503c\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199iterate_rank.cpp\u6587\u4ef6\u4e2d\u7684iterate_rank\u51fd\u6570\u4ee5\u5b9e\u73b0PageRank\u7684\u8fed\u4ee3\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a12\uff1a\u4ee3\u6570\u7b97\u6cd5 \u5c06 \u53d8\u6362\u5f97\u5230\uff1a \u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u77e9\u9635\u6c42\u9006\u4e0e\u77e9\u9635\u4e58\u6cd5\u6765\u76f4\u63a5\u8ba1\u7b97\u6240\u6709\u7f51\u9875\u7684PR\u503c\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199accurate_rank.cpp\u6587\u4ef6\u4e2d\u7684accurate_rank\u51fd\u6570\u4ee5\u5b9e\u73b0PageRank\u7684\u4ee3\u6570\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u53c2\u8003\u6587\u732e [1]MLPod. PageRank\u7b97\u6cd5\u8be6\u89e3[EB/OL]. [2021-10-15]. https://zhuanlan.zhihu.com/p/137561088. [2]\u7ef4\u57fa\u767e\u79d1. PageRank[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/PageRank.","title":"3-page-rank"},{"location":"3-page-rank/#3-page-rank","text":"\u8ba1\u7b97\u7b80\u5355\u56fe\u7684page-rank\u503c","title":"3-page-rank"},{"location":"3-page-rank/#_1","text":"\u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f void example_function ( const AdjointList & graph , Solution & solution ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 page-rank <filename>","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"3-page-rank/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"3-page-rank/#struct-node","text":"typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0","title":"struct Node"},{"location":"3-page-rank/#class-adjointlist","text":"\u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp","title":"class AdjointList"},{"location":"3-page-rank/#class-solution","text":"\u6570\u636e uint32_t size ; // \u56fe\u7684\u8282\u70b9\u4e2a\u6570 double * value ; // value[i]\u5b58\u50a8\u6700\u7ec8\u7684\u7b2ci\u4e2a\u8282\u70b9\u7684PageRank\u503c \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 Solution (); Solution ( uint32_t size ); Solution ( const Solution & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Solution (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const Solution & other ) const ; Solution & operator = ( const Solution & other ); void clear (); void dump () const ; // \u5c06\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1solution.hpp\u4e0esolution.cpp","title":"class Solution"},{"location":"3-page-rank/#pagerank","text":"PageRank\u662f Google \u516c\u53f8\u6240\u4f7f\u7528\u7684\u5bf9\u5176\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u7f51\u9875\u8fdb\u884c\u6392\u540d\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u4ee5\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u4e2a\u6570\u548c\u8d28\u91cf\u4f5c\u4e3a\u4e3b\u8981\u56e0\u7d20\u7c97\u7565\u5730\u5206\u6790\u7f51\u9875\u7684\u91cd\u8981\u6027\u7684\u7b97\u6cd5\uff0c\u5176\u57fa\u672c\u5047\u8bbe\u662f\uff1a\u66f4\u91cd\u8981\u7684\u9875\u9762\u5f80\u5f80\u66f4\u591a\u5730\u88ab\u5176\u4ed6\u9875\u9762\u5f15\u7528\uff08\u6216\u79f0\u5176\u4ed6\u9875\u9762\u4e2d\u4f1a\u66f4\u591a\u5730\u52a0\u5165\u901a\u5411\u8be5\u9875\u9762\u7684\u8d85\u94fe\u63a5\uff09\u3002 PageRank\u7684\u7ed3\u679c\u6765\u6e90\u4e8e\u4e00\u79cd\u57fa\u4e8e\u56fe\u8bba\u7684\u6570\u5b66\u7b97\u6cd5\u3002\u5b83\u5c06\u4e07\u7ef4\u7f51\u4e0a\u6240\u6709\u7684\u7f51\u9875\u89c6\u4f5c\u8282\u70b9\uff08node\uff09\uff0c\u800c\u5c06\u8d85\u94fe\u63a5\u89c6\u4f5c\u8fb9\uff08edge\uff09\u3002\u901a\u5411\u8be5\u7f51\u9875\u7684\u8d85\u94fe\u63a5\u79f0\u505a\u201c\u5bf9\u8be5\u7f51\u9875\u7684\u6295\u7968\uff08a vote of support\uff09\u201d\u3002 \u5047\u8bbe\u4e00\u4e2a\u75314\u4e2a\u7f51\u9875\u7ec4\u6210\u7684\u96c6\u5408\uff1a A \uff0c B \uff0c C \u548c D \u3002\u8fd9\u91cc\u5c06\u540c\u4e00\u9875\u9762\u4e2d\u591a\u4e2a\u6307\u5411\u76f8\u540c\u7684\u94fe\u63a5\u89c6\u4e3a\u540c\u4e00\u4e2a\u94fe\u63a5\u3002\u5bf9\u4e8e\u7279\u5b9a\u7684\u9875\u9762\uff0c\u5b83\u7684 PR\u503c \uff08PageRank\u503c\uff09\u5c06\u5747\u5206\u5230\u8be5\u9875\u9762\u6240\u94fe\u63a5\u7684\u9875\u9762\u4e0a\u3002 \u6ce8\uff1a\u6b64\u5904\u4ee5\u53ca\u4e0b\u6587\u4e2d\u7684\u94fe\u63a5\u5747\u4e3a\u5355\u5411\u94fe\u63a5\uff0c\u5373A->B\u4e0d\u7b49\u4ef7\u4e8eB->A \u5982\u679c\u6240\u6709\u9875\u9762\u90fd\u53ea\u94fe\u63a5\u81f3 A \uff0c\u90a3\u4e48 A \u7684PR\u503c\u5c06\u662f B \uff0c C \u53ca D \u7684PR\u503c\u4e4b\u548c\uff0c\u5373\uff1a \u91cd\u65b0\u5047\u8bbe B \u94fe\u63a5\u5230 A \u548c C \uff0c C \u94fe\u63a5\u5230 A \uff0c\u5e76\u4e14 D \u94fe\u63a5\u5230 A , B , C \u3002\u6700\u521d\u4e00\u4e2a\u9875\u9762\u603b\u5171\u53ea\u6709\u4e00\u7968\u3002\u6240\u4ee5 B \u7ed9 A , C \u6bcf\u4e2a\u9875\u9762\u534a\u7968\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c D \u6295\u51fa\u7684\u7968\u53ea\u6709\u4e09\u5206\u4e4b\u4e00\u52a0\u5230\u4e86 A \u7684PR\u503c\u4e0a\uff1a \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b97\u6cd5\u5c06\u6839\u636e\u6bcf\u4e2a\u9875\u9762\u8fde\u51fa\u603b\u6570L(x)\uff08 \u4ea6\u5373\u56fe\u4e2d\u8282\u70b9\u7684\u51fa\u5ea6 \uff09\u5e73\u5206\u8be5\u9875\u9762\u7684PR\u503c\uff0c\u5e76\u5c06\u5176\u52a0\u5230\u5176\u6240\u6307\u5411\u7684\u9875\u9762\uff1a \u6700\u540e\uff0c\u6240\u6709\u8fd9\u4e9bPR\u503c\u88ab\u6362\u7b97\u6210\u767e\u5206\u6bd4\u5f62\u5f0f\u518d\u4e58\u4e0a\u4e00\u4e2a\u4fee\u6b63\u7cfb\u6570 d\u3002d\u7684\u5927\u5c0f\u53ef\u4ee5\u7531\u4e00\u822c\u4e0a\u7f51\u8005\u4f7f\u7528\u6d4f\u89c8\u5668\u4e66\u7b7e\u529f\u80fd\u7684\u9891\u7387\u7684\u5e73\u5747\u503c\u4f30\u7b97\u5f97\u5230\uff0c\u5176\u610f\u4e49\u662f\uff1a\u4efb\u610f\u65f6\u523b\uff0c\u7528\u6237\u8bbf\u95ee\u5230\u67d0\u9875\u9762\u540e\u7ee7\u7eed\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u9875\u9762\u7684\u6982\u7387\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4fee\u6b63\u7cfb\u6570d\u7684\u53d6\u503c\u662f0.85 \u3002\u7531\u4e8e\u201c\u6ca1\u6709\u5411\u5916\u94fe\u63a5\u7684\u7f51\u9875\u201d\u4f20\u9012\u51fa\u53bb\u7684PR\u503c\u4f1a\u662f0\uff0c\u800c\u8fd9\u4f1a\u9012\u5f52\u5730\u5bfc\u81f4\u6307\u5411\u5b83\u7684\u9875\u9762\u7684PR\u503c\u7684\u8ba1\u7b97\u7ed3\u679c\u540c\u6837\u4e3a\u96f6\uff0c\u6240\u4ee5\u8d4b\u7ed9\u6bcf\u4e2a\u9875\u9762\u4e00\u4e2a\u6700\u5c0f\u503c(1-d)/N: \u6240\u4ee5\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u9875\u9762i\uff0c\u5176\u5bf9\u5e94PR\u503c\u5927\u5c0f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2dQ(pi)\u662f\u94fe\u5165\u9875\u9762pi\u7684\u96c6\u5408\u3002 \u96c6\u5408\u4e2d\u6240\u6709\u9875\u9762\u7684PR\u503c\u53ef\u4ee5\u7531\u4e00\u4e2a\u7279\u6b8a\u7684\u90bb\u63a5\u77e9\u9635\u7684\u7279\u5f81\u5411\u91cfR\u8868\u793a\u3002\u4e0b\u9762\u5199\u51faR\u7684\u8fed\u4ee3\u5f0f\uff1a \u5bb9\u6613\u8bc1\u660e\uff0c\u4e0a\u8ff0\u8fed\u4ee3\u5f0f\u4e2dR\u662f\u6536\u655b\u7684\u3002","title":"\u9884\u5907\u77e5\u8bc6\uff1aPageRank"},{"location":"3-page-rank/#1","text":"\u5c06\u6bcf\u4e2a\u70b9\u7684\u521d\u59cbPR\u503c\u5747\u8bbe\u7f6e\u4e3a1/N\u3002\u8bbe\u5b9a\u4e00\u4e2a\u7cbe\u786e\u5ea6\u03b5\uff0c\u8fed\u4ee3\u8ba1\u7b97 \u76f4\u5230|R\u2019-R|\u2264\u03b5 \u5373\u53ef\u3002\u5b9e\u8df5\u4e2d\uff0c\u51e0\u6b21\u8fed\u4ee3\u540eR'\u5373\u53ef\u5728\u6781\u9ad8\u7684\u7cbe\u786e\u5ea6\u4e0b\u4f30\u8ba1R\u7684\u503c\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199iterate_rank.cpp\u6587\u4ef6\u4e2d\u7684iterate_rank\u51fd\u6570\u4ee5\u5b9e\u73b0PageRank\u7684\u8fed\u4ee3\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a11\uff1a\u8fed\u4ee3\u7b97\u6cd5"},{"location":"3-page-rank/#2","text":"\u5c06 \u53d8\u6362\u5f97\u5230\uff1a \u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u77e9\u9635\u6c42\u9006\u4e0e\u77e9\u9635\u4e58\u6cd5\u6765\u76f4\u63a5\u8ba1\u7b97\u6240\u6709\u7f51\u9875\u7684PR\u503c\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199accurate_rank.cpp\u6587\u4ef6\u4e2d\u7684accurate_rank\u51fd\u6570\u4ee5\u5b9e\u73b0PageRank\u7684\u4ee3\u6570\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a12\uff1a\u4ee3\u6570\u7b97\u6cd5"},{"location":"3-page-rank/#_3","text":"[1]MLPod. PageRank\u7b97\u6cd5\u8be6\u89e3[EB/OL]. [2021-10-15]. https://zhuanlan.zhihu.com/p/137561088. [2]\u7ef4\u57fa\u767e\u79d1. PageRank[EB/OL]. [2021-10-15]. https://zh.wikipedia.org/wiki/PageRank.","title":"\u53c2\u8003\u6587\u732e"},{"location":"4-bfs/","text":"4-bfs \u5bf9\u56fe\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u57fa\u672c\u4fe1\u606f \u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f void example_function ( const AdjointList & graph , Solution & solution ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 bfs <filename> \u6570\u636e\u7ed3\u6784 struct Node typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0 class AdjointList \u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp class Solution \u6570\u636e uint32_t size ; // \u56fe\u7684\u8282\u70b9\u4e2a\u6570 uint32_t * distance ; // distance[i]\u5b58\u50a8\u7b2ci\u4e2a\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u7684\u8ddd\u79bb \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 Solution (); Solution ( uint32_t size ); Solution ( const Solution & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Solution (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const Solution & other ) const ; Solution & operator = ( const Solution & other ); void clear (); void dump () const ; // \u5c06\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1solution.hpp\u4e0esolution.cpp \u4efb\u52a11\uff1a\u81ea\u9876\u5411\u4e0b\u7684BFS \u6700\u57fa\u7840\u7684BFS\u5c31\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u5b83\u53ea\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u6bcf\u8fed\u4ee3\u4e00\u6b21\u540c\u65f6\u8fdb\u884c\u51fa\u961f\u548c\u5165\u961f\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7ef4\u62a4\u4e24\u4e2a\u961f\u5217\u7684\u601d\u8def\uff0c\u4fbf\u4e8e\u5c06BFS\u5e76\u884c\u5316\uff1a \u7b2c\u4e00\u6b21\u8fed\u4ee3\u524d\u5c06\u6839\u8282\u70b9\u63a8\u5165\u961f\u52171\u4e2d\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee \u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5c06\u961f\u52171\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u672a\u8bbf\u95ee\u8fc7\u7684\u90bb\u5c45\u63a8\u5165\u961f\u52172\uff0c\u5e76\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee \u6bcf\u6b21\u8fed\u4ee3\u7ed3\u675f\u524d\uff0c\u4ea4\u6362\u961f\u52171\u4e0e\u961f\u52172 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199top_down.cpp\u6587\u4ef6\u4e2d\u7684top_down\u51fd\u6570\u4ee5\u5b9e\u73b0\u81ea\u9876\u5411\u4e0b\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a12\uff1a\u81ea\u5e95\u5411\u4e0a\u7684BFS \u81ea\u9876\u5411\u4e0b\u5b9e\u73b0\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6b65\u9aa4\u7684\u66ff\u4ee3\u5b9e\u73b0\u53ef\u80fd\u66f4\u6709\u6548\u3002 \u4ee3\u66ff\u904d\u5386\u8fb9\u754c\u4e2d\u7684\u6240\u6709\u9876\u70b9\u5e76\u6807\u8bb0\u4e0e\u8fb9\u754c\u76f8\u90bb\u7684\u6240\u6709\u9876\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ba9\u6bcf\u4e2a\u9876\u70b9\u68c0\u67e5\u5b83\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u5230\u8fb9\u754c\u6765\u5b9e\u73b0 BFS\uff01 \u8be5\u7b97\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a BFS \u7684\u201c\u81ea\u5e95\u5411\u4e0a\u201d\u5b9e\u73b0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u9876\u70b9\u90fd\u201c\u5411\u4e0a\u67e5\u627e BFS \u6811\u201d\u4ee5\u627e\u5230\u5176\u7956\u5148\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199buttom_up.cpp\u6587\u4ef6\u4e2d\u7684buttom_up\u51fd\u6570\u4ee5\u5b9e\u73b0\u81ea\u5e95\u5411\u4e0a\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a13\uff1a\u6df7\u5408\u7684BFS \u5728 BFS \u7684\u67d0\u4e9b\u6b65\u9aa4\u4e2d\uff0c\u201c\u81ea\u5e95\u5411\u4e0a\u201dBFS \u660e\u663e\u6bd4\u81ea\u9876\u5411\u4e0b\u7248\u672c\u5feb\u3002 \u5728\u5176\u4ed6\u6b65\u9aa4\u4e2d\uff0c\u81ea\u9876\u5411\u4e0b\u7248\u672c\u660e\u663e\u66f4\u5feb\u3002 \u8fd9\u8868\u660e\u60a8\u7684\u5b9e\u73b0\u6709\u91cd\u5927\u7684\u6027\u80fd\u6539\u8fdb\uff0c\u5982\u679c \u60a8\u53ef\u4ee5\u6839\u636e\u8fb9\u754c\u7684\u5927\u5c0f\u6216\u56fe\u7684\u5176\u4ed6\u5c5e\u6027\u5728\u201c\u81ea\u4e0a\u800c\u4e0b\u201d\u548c\u201c\u81ea\u4e0b\u800c\u4e0a\u201d\u516c\u5f0f\u4e4b\u95f4\u52a8\u6001\u9009\u62e9\uff01 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199hybrid.cpp\u6587\u4ef6\u4e2d\u7684hybrid\u51fd\u6570\u4ee5\u5b9e\u73b0\u6df7\u5408\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u53c2\u8003\u6587\u732e [1]Beamer S, Asanovic K, Patterson D. Direction-optimizing breadth-first search[C]//SC'12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis. IEEE, 2012: 1-10.","title":"4-bfs"},{"location":"4-bfs/#4-bfs","text":"\u5bf9\u56fe\u8fdb\u884c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","title":"4-bfs"},{"location":"4-bfs/#_1","text":"\u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f void example_function ( const AdjointList & graph , Solution & solution ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 bfs <filename>","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"4-bfs/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"4-bfs/#struct-node","text":"typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0","title":"struct Node"},{"location":"4-bfs/#class-adjointlist","text":"\u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp","title":"class AdjointList"},{"location":"4-bfs/#class-solution","text":"\u6570\u636e uint32_t size ; // \u56fe\u7684\u8282\u70b9\u4e2a\u6570 uint32_t * distance ; // distance[i]\u5b58\u50a8\u7b2ci\u4e2a\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u7684\u8ddd\u79bb \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 Solution (); Solution ( uint32_t size ); Solution ( const Solution & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Solution (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const Solution & other ) const ; Solution & operator = ( const Solution & other ); void clear (); void dump () const ; // \u5c06\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1solution.hpp\u4e0esolution.cpp","title":"class Solution"},{"location":"4-bfs/#1bfs","text":"\u6700\u57fa\u7840\u7684BFS\u5c31\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u5b83\u53ea\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u6bcf\u8fed\u4ee3\u4e00\u6b21\u540c\u65f6\u8fdb\u884c\u51fa\u961f\u548c\u5165\u961f\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7ef4\u62a4\u4e24\u4e2a\u961f\u5217\u7684\u601d\u8def\uff0c\u4fbf\u4e8e\u5c06BFS\u5e76\u884c\u5316\uff1a \u7b2c\u4e00\u6b21\u8fed\u4ee3\u524d\u5c06\u6839\u8282\u70b9\u63a8\u5165\u961f\u52171\u4e2d\uff0c\u5e76\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee \u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u5c06\u961f\u52171\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u672a\u8bbf\u95ee\u8fc7\u7684\u90bb\u5c45\u63a8\u5165\u961f\u52172\uff0c\u5e76\u5c06\u5b83\u4eec\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee \u6bcf\u6b21\u8fed\u4ee3\u7ed3\u675f\u524d\uff0c\u4ea4\u6362\u961f\u52171\u4e0e\u961f\u52172 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199top_down.cpp\u6587\u4ef6\u4e2d\u7684top_down\u51fd\u6570\u4ee5\u5b9e\u73b0\u81ea\u9876\u5411\u4e0b\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a11\uff1a\u81ea\u9876\u5411\u4e0b\u7684BFS"},{"location":"4-bfs/#2bfs","text":"\u81ea\u9876\u5411\u4e0b\u5b9e\u73b0\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6b65\u9aa4\u7684\u66ff\u4ee3\u5b9e\u73b0\u53ef\u80fd\u66f4\u6709\u6548\u3002 \u4ee3\u66ff\u904d\u5386\u8fb9\u754c\u4e2d\u7684\u6240\u6709\u9876\u70b9\u5e76\u6807\u8bb0\u4e0e\u8fb9\u754c\u76f8\u90bb\u7684\u6240\u6709\u9876\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8ba9\u6bcf\u4e2a\u9876\u70b9\u68c0\u67e5\u5b83\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u5230\u8fb9\u754c\u6765\u5b9e\u73b0 BFS\uff01 \u8be5\u7b97\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a BFS \u7684\u201c\u81ea\u5e95\u5411\u4e0a\u201d\u5b9e\u73b0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u9876\u70b9\u90fd\u201c\u5411\u4e0a\u67e5\u627e BFS \u6811\u201d\u4ee5\u627e\u5230\u5176\u7956\u5148\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199buttom_up.cpp\u6587\u4ef6\u4e2d\u7684buttom_up\u51fd\u6570\u4ee5\u5b9e\u73b0\u81ea\u5e95\u5411\u4e0a\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a12\uff1a\u81ea\u5e95\u5411\u4e0a\u7684BFS"},{"location":"4-bfs/#3bfs","text":"\u5728 BFS \u7684\u67d0\u4e9b\u6b65\u9aa4\u4e2d\uff0c\u201c\u81ea\u5e95\u5411\u4e0a\u201dBFS \u660e\u663e\u6bd4\u81ea\u9876\u5411\u4e0b\u7248\u672c\u5feb\u3002 \u5728\u5176\u4ed6\u6b65\u9aa4\u4e2d\uff0c\u81ea\u9876\u5411\u4e0b\u7248\u672c\u660e\u663e\u66f4\u5feb\u3002 \u8fd9\u8868\u660e\u60a8\u7684\u5b9e\u73b0\u6709\u91cd\u5927\u7684\u6027\u80fd\u6539\u8fdb\uff0c\u5982\u679c \u60a8\u53ef\u4ee5\u6839\u636e\u8fb9\u754c\u7684\u5927\u5c0f\u6216\u56fe\u7684\u5176\u4ed6\u5c5e\u6027\u5728\u201c\u81ea\u4e0a\u800c\u4e0b\u201d\u548c\u201c\u81ea\u4e0b\u800c\u4e0a\u201d\u516c\u5f0f\u4e4b\u95f4\u52a8\u6001\u9009\u62e9\uff01 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199hybrid.cpp\u6587\u4ef6\u4e2d\u7684hybrid\u51fd\u6570\u4ee5\u5b9e\u73b0\u6df7\u5408\u7684BFS\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a13\uff1a\u6df7\u5408\u7684BFS"},{"location":"4-bfs/#_3","text":"[1]Beamer S, Asanovic K, Patterson D. Direction-optimizing breadth-first search[C]//SC'12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis. IEEE, 2012: 1-10.","title":"\u53c2\u8003\u6587\u732e"},{"location":"5-triangle-counting/","text":"5-triangle-counting \u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\uff08\u4e09\u5143\u73af\uff09\u7684\u4e2a\u6570 \u57fa\u672c\u4fe1\u606f \u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f uint32_t example_function ( const Graph & graph ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 triangle-counting <filename> \u6570\u636e\u7ed3\u6784 struct Node typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0 class AdjointList \u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp \u9884\u5907\u77e5\u8bc6 triangle-counting \u5b9a\u4e49 \u8bbe G=(V,E) \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u65e0\u5411\u56fe\u3002\u6211\u4eec\u5b9a\u4e49\u4e09\u89d2\u5f62\u662f\u4e09\u4e2a\u9876\u70b9\u7684\u96c6\u5408v1, v2,v3 \u2208 V \uff0c\u4f7f\u5f97\u65e0\u5411\u8fb9 (v1,v2)\u3001(v2, v3) \u548c (v1,v3) \u51fa\u73b0\u5728 E \u4e2d\u3002\u4e09\u89d2\u5f62\u8ba1\u6570\u95ee\u9898\u5c06\u65e0\u5411\u56feG\u4f5c\u4e3a\u8f93\u5165\u6570\u636e\u5e76\u8fd4\u56deG\u4e2d\u7684\u4e09\u89d2\u5f62\u6570\u91cf\u3002 \u4efb\u52a11\uff1arank-and-count\u7b97\u6cd5 rank rank\u6b65\u9aa4\u6784\u9020\u4e00\u4e2arank\u6570\u7ec4R\uff0cR[i]\u4e3a\u6807\u53f7\u4e3ai\u7684\u8282\u70b9\u7684rank\u503c\uff0c\u7136\u540e\u6839\u636erank\u6570\u7ec4\u5c06\u65e0\u5411\u56fe\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u3002 \u5047\u5b9a\u65e0\u5411\u56fe\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u90fd\u5b58\u50a8\u5728\u6570\u7ec4D\u4e2d\uff0c\u6570\u7ec4\u7684\u4e0b\u6807\u4e3a\u8282\u70b9\u7684ID\uff0cD[i]\u4e3a\u6807\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5ea6\u6570\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a \u6784\u9020rank\u6570\u7ec4\u3002\u5c06D\u4e2d\u7684\u8282\u70b9\u5ea6\u6570\u4e0e\u8282\u70b9ID\u7ed1\u5b9a\u5230\u4e00\u8d77\u5b58\u5165\u65b0\u6570\u7ec4\u4e2d\uff0c\u6309\u8282\u70b9\u5ea6\u6570\u5bf9\u5b83\u5347\u5e8f\u6392\u5e8f\u3002\u6784\u9020\u76f8\u540c\u957f\u5ea6\u7684\u6570\u7ec4R\u6765\u5b58\u50a8\u8282\u70b9\u5728\u65b0\u6570\u7ec4\u4e2d\u6392\u5e8f\u540e\u7684\u4e0b\u6807\uff08rank\u503c\uff09\u3002\u5bf9\u4e8eR[i] < R[j]\uff0c\u603b\u6709D[i] \u2264 D[j]\u3002 \u5c06\u65e0\u5411\u56fe\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u3002\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u53ea\u4fdd\u7559\u4ecerank\u503c\u8f83\u5c0f\u7684\u8282\u70b9\u6307\u5411rank\u503c\u8f83\u5927\u7684\u8282\u70b9\u7684\u5355\u5411\u8fb9\u3002 \u6b65\u9aa4\u5b8c\u6210\u540e\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8bb0\u4e3aA+\u3002 \u5b9e\u4f8b \u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u4f8b\u8bf4\u660e\u4e00\u4e0b\u3002\u5982\u56fe\uff0cD\u6570\u7ec4\u4e3a{2,4,1,3,2}\uff0c\u6784\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4 { { 0 , 2 },{ 1 , 4 },{ 2 , 1 },{ 3 , 3 },{ 4 , 2 } } \u6392\u5e8f\u540e\u4e3a { { 2 , 1 },{ 0 , 2 },{ 4 , 2 },{ 3 , 3 },{ 1 , 4 } } \u90a3\u4e48R\u6570\u7ec4\u7684\u503c\u4e3a R [ 2 ] = 0 ; R [ 0 ] = 1 ; R [ 4 ] = 2 ; R [ 3 ] = 3 ; R [ 1 ] = 4 ; \u4e4b\u540e\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u4ecerank\u503c\u8f83\u5c0f\u7684\u70b9\u6307\u5411rank\u503c\u8f83\u5927\u7684\u70b9\u7684\u6709\u5411\u8fb9\u3002 count count\u6b65\u9aa4\u5229\u7528rank\u6b65\u9aa4\u5f97\u5230\u7684\u6709\u5411\u56feA+\u6765\u6570\u4e09\u89d2\u5f62\u4e2a\u6570\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a \u7533\u8bf7\u4e00\u4e2a\u6570\u7ec4C\uff0c\u5927\u5c0f\u662f\u90bb\u63a5\u8868A+\u4e2d\u6240\u6709\u70b9\u7684\u90bb\u5c45\u6570\u91cf\u603b\u548c \u5bf9A+\u4e2d\u6bcf\u4e2a\u70b9v\uff0c\u4ee5\u53cav\u7684\u6bcf\u4e2a\u90bb\u5c45\u8282\u70b9w\uff0c\u6c42A+[v]\u4e0eA+[w]\u7684 \u4ea4\u96c6 I \u5c06I\u7684\u5143\u7d20\u4e2a\u6570\u5b58\u50a8\u5728C[\u03c1(v,w)]\u4e2d\uff0c\u5176\u4e2d\u03c1(v,w)\u662f\u5bf9\u6bcf\u4e00\u5bf9v,w\u8fd4\u56de\u503c\u5747\u4e0d\u76f8\u540c\u7684\u51fd\u6570\uff0c\u03c1(v,w)\u4e3a\u6bcf\u4e00\u5bf9v,w\u63d0\u4f9b\u552f\u4e00\u7684\u4e0b\u6807 C\u4e2d\u7684\u6240\u6709\u6570\u503c\u6c42\u548c\u5373\u4e3a\u4e09\u89d2\u5f62\u4e2a\u6570 \u5173\u4e8e\u6c42A+[v]\u4e0eA+[w]\u7684 \u4ea4\u96c6 \uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u601d\u8def\uff1a merge\u5b9e\u73b0\u6c42\u4e24\u6570\u7ec4\u4ea4\u96c6 \u9996\u5148\u5bf9\u4e24\u4e2a\u6570\u7ec4\u6392\u5e8f \u6bd4\u8f83\u5f53\u524d\u6307\u5411\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u503c\u5c0f\u7684\u6307\u9488\u540e\u79fb\u4e00\u4f4d \u5982\u679c\u76f8\u7b49\uff0c\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u89e3\u96c6\u4e2d\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u90fd\u540e\u79fb\u4e00\u4f4d \u5f53\u4efb\u610f\u4e00\u4e2a\u6307\u9488\u8d85\u51fa\u5c3e\u90e8\u540e\uff0c\u7ed3\u675f hash\u5b9e\u73b0\u6c42\u4e24\u6570\u7ec4\u4ea4\u96c6 \u904d\u5386\u6570\u7ec41\uff0c\u5c06\u6240\u6709\u503c\u52a0\u5165\u54c8\u5e0c\u8868 \u904d\u5386\u6570\u7ec42\uff0c\u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u8be2\uff0c\u5982\u67e5\u8be2\u5230\u8be5\u5143\u7d20\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u81f3\u89e3\u96c6 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199tc_merge.cpp\u6587\u4ef6\u4e2d\u7684tc_merge\u51fd\u6570\u3001tc_hash.cpp\u6587\u4ef6\u4e2d\u7684tc_hash\u51fd\u6570\uff0c\u4ee5\u5b9e\u73b0rank-and-count\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u4efb\u52a12\uff1a\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting \u5c06\u56fe\u8868\u793a\u4e3a\u90bb\u63a5\u77e9\u9635A\uff0cA[i][j] \u2208 {0,1}\u3002A[i][j] = 1\u65f6\u8868\u793a\u70b9i\u4e0ej\u8fde\u901a\uff0c\u53cd\u4e4b\u4e3a\u4e0d\u8fde\u901a\u3002 \u7531\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c\u77e9\u9635A^2\u7684\u542b\u4e49\u662f\uff1a A[i][k] \u00b7 A[k][j]=1\u7684\u542b\u4e49\u662f\uff0c\u70b9i\u5230\u70b9k\u662f\u8fde\u901a\u7684\u4e14\u70b9k\u5230\u70b9j\u662f\u8fde\u901a\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u8bf4\uff0cA^2[i][j]\u7684\u503c\u8868\u793a\uff0c\u70b9i\u5230\u67d0\u4e2a\u70b9k\u518d\u5230\u70b9j\u7684\u8fde\u901a\u8def\u5f84\u7684\u6570\u91cf\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e24\u4e2a\u70b9i,j\uff0cA[i][j] \u00b7 A^2[i][j] \u7684\u542b\u4e49\u5c31\u662f\u5305\u542b\u70b9i,j\u7684\u4e09\u89d2\u5f62\u7684\u4e2a\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u75282\u5c42\u5faa\u73af\u6c42\u51fa\u6bcf\u4e00\u5bf9\u70b9\u6240\u5728\u7684\u4e09\u89d2\u5f62\u8ba1\u6570C\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u4e09\u89d2\u5f62\u88ab\u6570\u4e86\u4e09\u6b21\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7ed3\u679c\u5e94\u8be5\u662f C/3\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199tc_matrix.cpp\u6587\u4ef6\u4e2d\u7684tc_matrix\u51fd\u6570\u4ee5\u5b9e\u73b0\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4 \u53c2\u8003\u6587\u732e [1]Shun J, Tangwongsan K. Multicore triangle computations without tuning[C]//2015 IEEE 31st International Conference on Data Engineering. IEEE, 2015: 149-160. [2]www.cs.cmu.edu. Triangle Counting and Matrix Multiplication[EB/OL]. [2021-10-15]. https://www.cs.cmu.edu/~15750/notes/lec1.pdf.","title":"5-triangle-counting"},{"location":"5-triangle-counting/#5-triangle-counting","text":"\u8ba1\u7b97\u65e0\u5411\u56fe\u4e2d\u7684\u4e09\u89d2\u5f62\uff08\u4e09\u5143\u73af\uff09\u7684\u4e2a\u6570","title":"5-triangle-counting"},{"location":"5-triangle-counting/#_1","text":"\u8f93\u5165\u6587\u4ef6\u683c\u5f0f \u90bb\u63a5\u8868\u3002 \u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u6700\u524d\u7aef4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2a\u65e0\u7b26\u53f732\u4f4d\u6574\u6570n\uff0c\u8868\u793a\u56fe\u7684\u70b9\u6570\uff0c\u4e4b\u540en\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793an\u4e2a\u70b9\u7684\u51fa\u5ea6out_degree\uff0c\u4e4b\u540e\u6bcfout_degree[i]\u4e2a4\u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u8868\u793a\u88ab\u7b2ci\u4e2a\u70b9\u6307\u5411\u7684\u70b9 \u51fd\u6570\u683c\u5f0f uint32_t example_function ( const Graph & graph ) \u7f16\u8bd1\u6307\u4ee4 make \u6e05\u7406\u6307\u4ee4 make clean \u8fd0\u884c\u6307\u4ee4 triangle-counting <filename>","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"5-triangle-counting/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"5-triangle-counting/#struct-node","text":"typedef struct Node { uint32_t value ; struct Node * next ; } Node ; Node \u7ed3\u6784\u7528\u4e8e class AdjointList \u4e2d\u94fe\u8868\u7684\u5b9e\u73b0","title":"struct Node"},{"location":"5-triangle-counting/#class-adjointlist","text":"\u90bb\u63a5\u8868\u6570\u636e uint32_t vertex_count ; uint32_t edge_count ; uint32_t * out_degree ; // out_degree[i]\u50a8\u5b58\u8282\u70b9i\u7684\u51fa\u5ea6 Node * vertex ; // vertex[i]\u7684next\u6307\u5411\u4e00\u4e2a\u5305\u542b\u8282\u70b9i\u6307\u5411\u7684\u70b9\u7684\u94fe\u8868 \u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570 AdjointList (); AdjointList ( const int vertex_count ); AdjointList ( const AdjointList & other ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ AdjointList (); \u5e38\u7528\u8fd0\u7b97\u7b26\u4e0e\u51fd\u6570 bool operator == ( const AdjointList & other ) const ; AdjointList & operator = ( const AdjointList & other ); bool add_edge ( const int from , const int to ); bool search_edge ( const int from , const int to ) const ; bool remove_edge ( const int from , const int to ); uint32_t ** convert_to_adjoint_matrix () const ; // \u8f6c\u6362\u4e3a\u56fe\u7684\u90bb\u63a5\u77e9\u9635 void dump_adjoint_list () const ; // \u5c06\u8868\u5185\u6570\u636e\u8f93\u51fa\u5728\u63a7\u5236\u53f0\u4e2d \u5b8c\u6574\u5185\u5bb9\u53c2\u89c1adjoint_list.hpp\u4e0eadjoint_list.cpp","title":"class AdjointList"},{"location":"5-triangle-counting/#_3","text":"","title":"\u9884\u5907\u77e5\u8bc6"},{"location":"5-triangle-counting/#triangle-counting","text":"\u8bbe G=(V,E) \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u65e0\u5411\u56fe\u3002\u6211\u4eec\u5b9a\u4e49\u4e09\u89d2\u5f62\u662f\u4e09\u4e2a\u9876\u70b9\u7684\u96c6\u5408v1, v2,v3 \u2208 V \uff0c\u4f7f\u5f97\u65e0\u5411\u8fb9 (v1,v2)\u3001(v2, v3) \u548c (v1,v3) \u51fa\u73b0\u5728 E \u4e2d\u3002\u4e09\u89d2\u5f62\u8ba1\u6570\u95ee\u9898\u5c06\u65e0\u5411\u56feG\u4f5c\u4e3a\u8f93\u5165\u6570\u636e\u5e76\u8fd4\u56deG\u4e2d\u7684\u4e09\u89d2\u5f62\u6570\u91cf\u3002","title":"triangle-counting \u5b9a\u4e49"},{"location":"5-triangle-counting/#1rank-and-count","text":"","title":"\u4efb\u52a11\uff1arank-and-count\u7b97\u6cd5"},{"location":"5-triangle-counting/#rank","text":"rank\u6b65\u9aa4\u6784\u9020\u4e00\u4e2arank\u6570\u7ec4R\uff0cR[i]\u4e3a\u6807\u53f7\u4e3ai\u7684\u8282\u70b9\u7684rank\u503c\uff0c\u7136\u540e\u6839\u636erank\u6570\u7ec4\u5c06\u65e0\u5411\u56fe\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u3002 \u5047\u5b9a\u65e0\u5411\u56fe\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u90fd\u5b58\u50a8\u5728\u6570\u7ec4D\u4e2d\uff0c\u6570\u7ec4\u7684\u4e0b\u6807\u4e3a\u8282\u70b9\u7684ID\uff0cD[i]\u4e3a\u6807\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5ea6\u6570\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a \u6784\u9020rank\u6570\u7ec4\u3002\u5c06D\u4e2d\u7684\u8282\u70b9\u5ea6\u6570\u4e0e\u8282\u70b9ID\u7ed1\u5b9a\u5230\u4e00\u8d77\u5b58\u5165\u65b0\u6570\u7ec4\u4e2d\uff0c\u6309\u8282\u70b9\u5ea6\u6570\u5bf9\u5b83\u5347\u5e8f\u6392\u5e8f\u3002\u6784\u9020\u76f8\u540c\u957f\u5ea6\u7684\u6570\u7ec4R\u6765\u5b58\u50a8\u8282\u70b9\u5728\u65b0\u6570\u7ec4\u4e2d\u6392\u5e8f\u540e\u7684\u4e0b\u6807\uff08rank\u503c\uff09\u3002\u5bf9\u4e8eR[i] < R[j]\uff0c\u603b\u6709D[i] \u2264 D[j]\u3002 \u5c06\u65e0\u5411\u56fe\u8f6c\u6362\u4e3a\u6709\u5411\u56fe\u3002\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u53ea\u4fdd\u7559\u4ecerank\u503c\u8f83\u5c0f\u7684\u8282\u70b9\u6307\u5411rank\u503c\u8f83\u5927\u7684\u8282\u70b9\u7684\u5355\u5411\u8fb9\u3002 \u6b65\u9aa4\u5b8c\u6210\u540e\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8bb0\u4e3aA+\u3002 \u5b9e\u4f8b \u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u4f8b\u8bf4\u660e\u4e00\u4e0b\u3002\u5982\u56fe\uff0cD\u6570\u7ec4\u4e3a{2,4,1,3,2}\uff0c\u6784\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4 { { 0 , 2 },{ 1 , 4 },{ 2 , 1 },{ 3 , 3 },{ 4 , 2 } } \u6392\u5e8f\u540e\u4e3a { { 2 , 1 },{ 0 , 2 },{ 4 , 2 },{ 3 , 3 },{ 1 , 4 } } \u90a3\u4e48R\u6570\u7ec4\u7684\u503c\u4e3a R [ 2 ] = 0 ; R [ 0 ] = 1 ; R [ 4 ] = 2 ; R [ 3 ] = 3 ; R [ 1 ] = 4 ; \u4e4b\u540e\u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u4ecerank\u503c\u8f83\u5c0f\u7684\u70b9\u6307\u5411rank\u503c\u8f83\u5927\u7684\u70b9\u7684\u6709\u5411\u8fb9\u3002","title":"rank"},{"location":"5-triangle-counting/#count","text":"count\u6b65\u9aa4\u5229\u7528rank\u6b65\u9aa4\u5f97\u5230\u7684\u6709\u5411\u56feA+\u6765\u6570\u4e09\u89d2\u5f62\u4e2a\u6570\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a \u7533\u8bf7\u4e00\u4e2a\u6570\u7ec4C\uff0c\u5927\u5c0f\u662f\u90bb\u63a5\u8868A+\u4e2d\u6240\u6709\u70b9\u7684\u90bb\u5c45\u6570\u91cf\u603b\u548c \u5bf9A+\u4e2d\u6bcf\u4e2a\u70b9v\uff0c\u4ee5\u53cav\u7684\u6bcf\u4e2a\u90bb\u5c45\u8282\u70b9w\uff0c\u6c42A+[v]\u4e0eA+[w]\u7684 \u4ea4\u96c6 I \u5c06I\u7684\u5143\u7d20\u4e2a\u6570\u5b58\u50a8\u5728C[\u03c1(v,w)]\u4e2d\uff0c\u5176\u4e2d\u03c1(v,w)\u662f\u5bf9\u6bcf\u4e00\u5bf9v,w\u8fd4\u56de\u503c\u5747\u4e0d\u76f8\u540c\u7684\u51fd\u6570\uff0c\u03c1(v,w)\u4e3a\u6bcf\u4e00\u5bf9v,w\u63d0\u4f9b\u552f\u4e00\u7684\u4e0b\u6807 C\u4e2d\u7684\u6240\u6709\u6570\u503c\u6c42\u548c\u5373\u4e3a\u4e09\u89d2\u5f62\u4e2a\u6570 \u5173\u4e8e\u6c42A+[v]\u4e0eA+[w]\u7684 \u4ea4\u96c6 \uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e24\u79cd\u601d\u8def\uff1a merge\u5b9e\u73b0\u6c42\u4e24\u6570\u7ec4\u4ea4\u96c6 \u9996\u5148\u5bf9\u4e24\u4e2a\u6570\u7ec4\u6392\u5e8f \u6bd4\u8f83\u5f53\u524d\u6307\u5411\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u503c\u5c0f\u7684\u6307\u9488\u540e\u79fb\u4e00\u4f4d \u5982\u679c\u76f8\u7b49\uff0c\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u89e3\u96c6\u4e2d\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u90fd\u540e\u79fb\u4e00\u4f4d \u5f53\u4efb\u610f\u4e00\u4e2a\u6307\u9488\u8d85\u51fa\u5c3e\u90e8\u540e\uff0c\u7ed3\u675f hash\u5b9e\u73b0\u6c42\u4e24\u6570\u7ec4\u4ea4\u96c6 \u904d\u5386\u6570\u7ec41\uff0c\u5c06\u6240\u6709\u503c\u52a0\u5165\u54c8\u5e0c\u8868 \u904d\u5386\u6570\u7ec42\uff0c\u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u8be2\uff0c\u5982\u67e5\u8be2\u5230\u8be5\u5143\u7d20\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u81f3\u89e3\u96c6","title":"count"},{"location":"5-triangle-counting/#_4","text":"\u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199tc_merge.cpp\u6587\u4ef6\u4e2d\u7684tc_merge\u51fd\u6570\u3001tc_hash.cpp\u6587\u4ef6\u4e2d\u7684tc_hash\u51fd\u6570\uff0c\u4ee5\u5b9e\u73b0rank-and-count\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a1\u8981\u6c42"},{"location":"5-triangle-counting/#2triangle-counting","text":"\u5c06\u56fe\u8868\u793a\u4e3a\u90bb\u63a5\u77e9\u9635A\uff0cA[i][j] \u2208 {0,1}\u3002A[i][j] = 1\u65f6\u8868\u793a\u70b9i\u4e0ej\u8fde\u901a\uff0c\u53cd\u4e4b\u4e3a\u4e0d\u8fde\u901a\u3002 \u7531\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c\u77e9\u9635A^2\u7684\u542b\u4e49\u662f\uff1a A[i][k] \u00b7 A[k][j]=1\u7684\u542b\u4e49\u662f\uff0c\u70b9i\u5230\u70b9k\u662f\u8fde\u901a\u7684\u4e14\u70b9k\u5230\u70b9j\u662f\u8fde\u901a\u7684\uff0c\u8fd9\u4e5f\u5c31\u662f\u8bf4\uff0cA^2[i][j]\u7684\u503c\u8868\u793a\uff0c\u70b9i\u5230\u67d0\u4e2a\u70b9k\u518d\u5230\u70b9j\u7684\u8fde\u901a\u8def\u5f84\u7684\u6570\u91cf\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e24\u4e2a\u70b9i,j\uff0cA[i][j] \u00b7 A^2[i][j] \u7684\u542b\u4e49\u5c31\u662f\u5305\u542b\u70b9i,j\u7684\u4e09\u89d2\u5f62\u7684\u4e2a\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u75282\u5c42\u5faa\u73af\u6c42\u51fa\u6bcf\u4e00\u5bf9\u70b9\u6240\u5728\u7684\u4e09\u89d2\u5f62\u8ba1\u6570C\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u4e09\u89d2\u5f62\u88ab\u6570\u4e86\u4e09\u6b21\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7ed3\u679c\u5e94\u8be5\u662f C/3\u3002 \u4efb\u52a1\u8981\u6c42 \u53c2\u8003\u4ee5\u4e0a\u5185\u5bb9\uff0c\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0c\u7f16\u5199tc_matrix.cpp\u6587\u4ef6\u4e2d\u7684tc_matrix\u51fd\u6570\u4ee5\u5b9e\u73b0\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting\u7b97\u6cd5\uff0c\u5e76\u4e14\u7f16\u8bd1\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4f1a\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6b63\u786e\u5e76\u6d4b\u91cf\u8fd0\u884c\u65f6\u95f4","title":"\u4efb\u52a12\uff1a\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\u7684triangle-counting"},{"location":"5-triangle-counting/#_5","text":"[1]Shun J, Tangwongsan K. Multicore triangle computations without tuning[C]//2015 IEEE 31st International Conference on Data Engineering. IEEE, 2015: 149-160. [2]www.cs.cmu.edu. Triangle Counting and Matrix Multiplication[EB/OL]. [2021-10-15]. https://www.cs.cmu.edu/~15750/notes/lec1.pdf.","title":"\u53c2\u8003\u6587\u732e"}]}